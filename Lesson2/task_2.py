"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def count_num(number: int, even=0, not_even=0):
    try:
        if number == 0:
            return f'Количество четных: {even}\nКоличество НЕ четных: {not_even}\n'
        else:
            if (number % 10) % 2 == 0:
                return count_num(number // 10, even + 1, not_even)
            else:
                return count_num(number // 10, even, not_even + 1)
    except:
        return 'Wrong input'


print(count_num(1234500001))
print(count_num(34560))
print(count_num(123))
