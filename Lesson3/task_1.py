"""
Задание 1.

Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""

import time


# Декоратор для замера времени
def time_execution(fun):
    def inside_fun():
        start_time = time.time()
        fun()
        end_time = time.time()
        return end_time - start_time

    return inside_fun


# Заполняем список достаточно большое количество раз, чтобы увидеть задержку
# Время на создание если и отличается от словаря (чего я не зафиксировал), то не играет никакой разницы в результате
@time_execution
def insert_with_list():
    my_list = list()
    for i in range(999999):
        my_list.append(i)


# Заполняем словарь достаточно большое количество раз, чтобы увидеть задержку
# Время на создание если и отличается от списка (чего я не зафиксировал), то не играет никакой разницы в результате
@time_execution
def insert_with_dict():
    my_dict = dict()
    for i in range(999999):
        my_dict[i] = i


# Посчитаем среднее время на выборке, хотя бы в 50
# Вывод: Вставка в словарь выходит дольше по времени, чем вставка в список
# Причина в хэшируемости ключей словаря, на что тратится дополнительное время
dif = []
for _ in range(50):
    dif.append(insert_with_list() - insert_with_dict())
print('Difference list - dict (insert operations): ', sum(dif) / len(dif))


# Далее проделаем операции над списками и словарем
# Попробуем осуществить доступ к 9000 элементам списка по индексу
@time_execution
def get_in_list():
    for i in range(999, 9999):
        a.index(i)


# Попробуем осуществить доступ к 9000 элементам словаря по индексу
@time_execution
def get_in_dict():
    for i in range(999, 9999):
        b.get(i)


# Посчитаем среднее время на выборке, хотя бы в 50
# Вывод: Доступ к элементам словаря выходит быстрее, чем к элементам списка
# Причина в том, что доступ по ключу осуществляется напрямую к элементу с использованием хэш таблицы, что быстрее
a = [i for i in range(99999)]
b = {i: i for i in range(99999)}
dif2 = []
for _ in range(50):
    dif2.append(get_in_list() - get_in_dict())
print('Difference list - dict (get operations): ', sum(dif2) / len(dif2))
